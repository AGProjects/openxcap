#!/usr/bin/env python

# Copyright (C) 2007-2015 AG Projects.
#

"""OpenXCAP"""


MEMORY_DEBUG = False

if __name__ == '__main__':
    import sys
    import xcap
    from application import log
    from application.process import process, ProcessError
    from optparse import OptionParser

    name = 'openxcap'
    fullname = 'OpenXCAP'
    description = 'An open source XCAP Server'

    config_directory = '/etc/openxcap'
    runtime_directory = '/var/run/openxcap'
    default_pid = "%s/%s.pid" % (runtime_directory, name)

    parser = OptionParser(version='%%prog %s' % xcap.__version__)
    parser.add_option("--no-fork", action="store_false", dest="fork", default=1,
                      help="run the process in the foreground (for debugging)")
    parser.add_option("--pid", dest="pidfile", default=default_pid,
                      help="pid file (%s)" % default_pid,
                      metavar="File")

    (options, args) = parser.parse_args()

    try:
        from xcap.logutil import web_logger
    except Exception as e:
        log.critical('Failed to create %s: %s' % (fullname, e))
        if not isinstance(e, (RuntimeError, OSError, IOError)):
            log.exception()
        sys.exit(1)

    if web_logger.filename is None:  # access log is reported along with the rest of the applications's logging
        log.Formatter.prefix_format = '{record.levelname:<8s} [{record.name}] '
    else:
        log.Formatter.prefix_format = '{record.levelname:<8s} '

    pidfile = options.pidfile
    process.system_config_directory = config_directory

    if not options.fork:
        process._runtime_directory = None
    else:
        try:
            process.runtime_directory = runtime_directory
            process.daemonize(pidfile)
        except ProcessError, e:
            log.critical('Fatal error: %s' % e)
            sys.exit(1)
        log.use_syslog(name)

    log.info('Starting %s' % fullname)

    try:
        if not options.fork and MEMORY_DEBUG:
            from application.debug.memory import memory_dump
        from xcap.server import XCAPServer
        server = XCAPServer()
        server.start()
    except Exception, e:
        log.critical("Failed to create %s: %s" % (fullname, e))
        if type(e) is not RuntimeError:
            log.exception()
        sys.exit(1)

    if not options.fork and MEMORY_DEBUG:
        print "------------------"
        memory_dump()
        print "------------------"

