
High priority
-------------

1. Log all server and basic access messages to syslog and keep verbose
   logging (headers,bodies) in var/log/openxcap/

2. Log the whole HTTP URI as seen by the client

3. As XCAP rls documents are expanded by the Presence agent is important
that the end-user to not provision unsafe data in the Presence server. This
is to avoind pointing the server to external documents that might open the
door for indirect Denial of Service attacks (the proxy will do HTTP request
for every incomming SUBSCRIBE). An OpenXCAP server configuration option
called 'check_rls_documents' should enable sanity checks for the content of
RLS documents based as following rules:

The service-uri must be formated as: sip:username@domain.com;pres-list=id or sip:username@domain.com

If a <resource-list> element exists:

http://xcap.exmaple.com/xcap-root/resource-lists/users/sip:username@domain/index/~~/resource-lists/list[@name="id"]

The XCAP root part of a resource list element must match the XCAP root used
to access this rls-services document.

The SIP URI in the resource list URL must be the same with the username used
for accessing the rls services document.

If <resource-list> points to a resource list with name=id, this list must
exist on the server.

The Presence agent must combine the individual sip uri entries with the the
list expanded from <resource-list> elements.
If the Presence agent reads data directly from a database (like OpenSIPS
does) it should not use HTTP get to fetch the document as the database is
common for both rls-services and resource list documents are hosted on the
same physical server.

4. Validation after put/delete attribute

5. Add SIP client support to OpenXCAP to send PUBLISH for xcap-diff event. 
   Modify OpenSIPS to perform refreshWatchers() when the PUBLISH is received.


Low priority
------------

1. Add xcap-directory application to list the documents for a given user

2. Allow port in root= settings, thus making port= parameter unnecessary.
   Make sure that when listening on non-default port valid URIs are logged (see prev. issue)
   Inside, always use xcap root with port (if non-default), i.e. put port in logs, xcap-diff docs

3. Change default port for https:// to 443 (currently is 8000). Keep the
   default port for http:// 8000 for backward compatibility.

4. Test suite: validate after each GET, test well-formedness of the received
   elements.

5. Finish global/users: test that all possible combinations (global/users
   GET/PUT/DELETE each app) return reasonable error

6. global + digest auth = not implemented

7. URIs in att_value. Should differently encoded be considered equal?
   Note, that there're 2 encodings: percent-encoding, and xml attribute encoding (i.e. &quot; and friends)
   Resource Lists RFC features example document with http URI that has percent-encoding in it.
   Does that mean that to match against it, percents in the URI should be themselves percent-encoded?
   Or XCAP server should use its knowledge about the app and figure out that URIs are equivalent.
   This may be unreliable if it's unknown whether this URI was percent-encoded or not. Why
   that URI was percent encoded in the first place, why not paste it in the documents as it is, using
   XML escaping where necessary.
   Make few simple xpath expressions that include that URI as att_value and post it SIMPLE mailing list.

8. Errors from twisted are text/html and from xcap are text/plain: use one
   (text/plain?)


