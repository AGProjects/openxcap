
Installation
------------

For Debian testing or unstable there is an official public repository
provided by AG Projects. Install the AG Projects debian software signing
key:

wget http://download.ag-projects.com/agp-debian-gpg.key apt-key add
agp-debian-gpg.key

Add these lines in etc/apt/sources.list

# AG Projects software 
deb http://ag-projects.com/debian unstable main
deb-src http://ag-projects.com/debian unstable main

After that, run:

apt-get update
apt-get install openxcap python-xcaplib

Following the same procedure you can install the xcap client and opensips
integration packages using:

apt-get install python-xcaplib
apt-get install soap-simple-proxy
apt-get install openser-mi-proxy

For non Debian installations, you must perform the following steps to
install OpenXCAP:

 * Download the tarball from http://download.ag-projects.com.info/OpenXCAP/
 * Extract it using tar xzvf openxcap-version.tar.gz and change directory
   to the newly created openxcap directory
 * Run python setup.py install as root.[[BR]]
 * Copy the config.ini.sample file to /etc/openxcap/config.ini and edit it as needed.
 * Copy the startup script, debian/openxcap.init to /etc/init.d/openxcap,
   and start the service: /etc/init.d/openxcap start

Prerequisites:

 * LibXML (http://xmlsoft.org/downloads.html)
 * Python 2.5 or newer (www.python.org)
 * Twisted framework (http://twistedmatrix.com) 
 * Twisted Core, Twisted Web and Twisted Web 2
 * python-lxml (http://codespeak.net/lxml)
 * python-application
 * python-xml (_xmlplus package provided by pyxml library)
 * python-mysqldb

To enable TLS support:

 * GnuTLS library (http://www.gnu.org/software/gnutls)
 * python-gnutls (http://pypi.python.org/pypi/python-gnutls)

OpenXCAP has been tested on Debian unstable with the following versions:

 * libxml2: 2.6.32.dfsg-2
 * python: 2.5.2-1
 * python-application: 1.0.9-4
 * python-gnutls: 1.1.5-2
 * python-lxml: 2.0.5-1
 * python-sqlobject: 0.10.1-1
 * python-twisted-core: 8.0.1-1
 * python-twisted-web: 8.0.0-1
 * python-twisted-web2: 8.0.1-1
 * python-zopeinterface: 3.3.1-6


Test suite
----------

A test suite for testing the functionality the server is located in
/xcap/test directory. If the software has been installed as a Debian
package, the test suite is found in /usr/lib/python2.5/site-packages/xcap/test

To run the test suite add a user to the XCAP subscriber database
(alice@example.com in the following example), then create a configuration
file with the credentials in ~/.sipclient/config.ini that reads:

[Account]
sip_address=alice@example.com
password=123
xcap_root = https://xcap.example.com/xcap-root

Then run the test suite:

$./test.py 
test_delete (test_attribute.AttributeTest) ... ok
test_get (test_attribute.AttributeTest) ... WARNING: test with URI in att_value is disabled ok
test_put (test_attribute.AttributeTest) ... ok
test_global_auth (test_auth.AuthTest_org_openmobilealliance_pres_rules) ... ok
test_users_auth (test_auth.AuthTest_org_openmobilealliance_pres_rules) ... ok
test_global_auth (test_auth.AuthTest_pidf_manipulation) ... ok
test_users_auth (test_auth.AuthTest_pidf_manipulation) ... ok
test_global_auth (test_auth.AuthTest_pres_rules) ... ok
test_users_auth (test_auth.AuthTest_pres_rules) ... ok
test_global_auth (test_auth.AuthTest_resource_lists) ... ok
test_users_auth (test_auth.AuthTest_resource_lists) ... ok
test_global_auth (test_auth.AuthTest_rls_services) ... ok
test_users_auth (test_auth.AuthTest_rls_services) ... ok
test_global_auth (test_auth.AuthTest_test_app) ... ok
test_users_auth (test_auth.AuthTest_test_app) ... ok
test_global_auth (test_auth.AuthTest_watchers) ... ok
test_users_auth (test_auth.AuthTest_watchers) ... ok
test_global_auth (test_auth.AuthTest_xcap_caps) ... ok
test_users_auth (test_auth.AuthTest_xcap_caps) ... ok
test_delete (test_element.ElementTest) ... ok
test_get (test_element.ElementTest) ... WARNING: test with URI in att_value is disabled ok
test_put_error (test_element.ElementTest) ... ok
Testing different ways of inserting an element as described in examples from Section 8.2.3 ... ok
Testing PUT requests of form '*[@att="some"]' which require looking into body of PUT ... ok
test_replacement (test_element_put.PutElementTest) ... ok
test400_1 (test_errors.ErrorsTest) ... ok
test400_2 (test_errors.ErrorsTest) ... ok
test404 (test_errors.ErrorsTest) ... ok
test405 (test_errors.ErrorsTest) ... ok
test409 (test_errors.ErrorsTest) ... ok
test_gibberish (test_errors.ErrorsTest) ... ok
test_conditional_GET (test_etags.ETagTest) ... ok
test_conditional_PUT (test_etags.ETagTest) ... ok
test_conditional_GET (test_etags.ETagTest2) ... ok
test_conditional_PUT (test_etags.ETagTest2) ... ok
test_etag_parsing (test_etags.ETagTest2) ... ok
test_has_global (test_global.TestGlobal) ... ok
test_no_global (test_global.TestGlobal) ... ok
test_ns_bindings (test_nsbindings.NSBindingsTest) ... ok
test_pidf_manipulation (test_pidf.PIDFTest) ... ok
test_pidf_manipulation (test_presrules.PresenceRulesTest) ... ok
test_operations (test_resourcelists.DocumentTest) ... ok
test_operations (test_rlsservices.DocumentTest) ... ok
test_get (test_watchers.Test) ... ok
test_schema (test_xcap_caps.XCAPCaps) ... ok
----------------------------------------------------------------------
Ran 45 tests in 74.427s

Notes

- Running the test suite for a given user will result in the destruction of
all xcap documents belonging to that user
- Replacing 'test.py' with 'test_something.py' will run only the tests
defined in test_something.py


Testing with xcapclient
-----------------------

A command line client is available in the same download repository of
OpenXCAP server. The client can be used to manipulate full or partial XML
documents on XCAP servers (not limited to OpenXCAP) and has a bash shell
command line completion facility that makes it very easy to browse through
the structure of XML documents based on XPATH.

See README of python-xcaplib package for examples on how to create/retrieve
a document.

