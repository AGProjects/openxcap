
Installation
------------

This documentation is split in multiple sections that deal with the
installation and configuration of several components:

* OpenXCAP, the XCAP server itself

* opensips-mi-proxy, an optional component that replaces OpenSIPS xml-rpc
  module that exhibits stability problems, is required to issue the
  refreshWatchers command in OpenSIPS when the the policy stored in the
  pres-rules XCAP document for a given presentity has been changed. The
  proxy has also more features like being able to listen on a custom IP
  address and provides an access list for the clients allowed to connect

* soap-simple-proxy, an optional component that can access XCAP documents
  using SOAP/XML requests, it can be used to build a web page to perform XCAP
  requests for pres-rules and pidf-manipulation documents

* python-xcaplib, an optional component that can be used for developing an
  XCAP client or for testing the server using the xcapclient command line
  utility


Dependencies
------------

 * Python 2.5 or 2.6  http://www.python.org
 * Twisted Core, Twisted Web and Twisted Web 2 >= 8.1.0  http://twistedmatrix.com
 * python-lxml >= 2.0.7  http://codespeak.net/lxml)
 * python-application >= 1.2.0  http://pypi.python.org/pypi/python-application
 * python-gnutls >=1.8.1  http://pypi.python.org/pypi/python-gnutls
 * python-mysqldb >=1.2.2  http://pypi.python.org/simple/mysql-python
 * python-imaging >=1.1.7  http://pypi.python.org/simple/PIL/


Debian Packages
---------------

Binary packages are available for Debian and Ubuntu on i386 and amd64
architectures.

Install AG Projects debian signing key: 

wget http://download.ag-projects.com/agp-debian-gpg.key
sudo apt-key add agp-debian-gpg.key 

Add the following lines to /etc/apt/sources.list:

# Debian Unstable
deb http://ag-projects.com/debian unstable main
deb-src http://ag-projects.com/debian unstable main

# Ubuntu Karmic
deb http://ag-projects.com/ubuntu karmic main
deb-src http://ag-projects.com/ubuntu karmic main

# Ubuntu Lucid
deb http://ag-projects.com/ubuntu lucid main
deb-src http://ag-projects.com/ubuntu lucid main

Update the list of available packages:

sudo apt-get update

Install OpenXCAP server:

apt-get install openxcap

Install opensips-mi-proxy (on the machine running OpenSIPS):

sudo apt-get install opensips-mi-proxy
Install soap-simple-proxy:

sudo apt-get install soap-simple-proxy
Install xcap-client library:

sudo apt-get install python-xcaplib


Tar Archives
------------

OpenXCAP and related software can be downloaded as tar archives from:

http://download.ag-projects.com/XCAP/

Extract it using tar xzvf openxcap-version.tar.gz.

Install the software:

cd openxcap
sudo python setup.py install

Download and install opensips-mi-proxy

Extract it using tar xzvf opensips-mi-proxy-version.tar.gz.

Install the software:

cd opensips-mi-proxy
sudo python setup.py install

Download and install soap-simple-proxy

Extract it using tar xzvf soap-simple-proxy-version.tar.gz.

Install the software:

cd soap-simple-proxy
sudo python setup.py install


Version control repository
--------------------------

The source code is managed using darcs version control tool. The darcs
repository can be fetched with:

darcs get http://devel.ag-projects.com/repositories/openxcap

Other packages like python-xcaplib, soap-simple-proxy and opensips-mi-proxy
can be obtained in the same way.

To obtain the incremental changes after the initial get:

cd openxcap
darcs pull -a


Configuration
-------------

Configure OpenXCAP server

If you have installed the debian package copy etc/openxcap/config.ini.sample
to /etc/openxcap/config.ini. For other Linux copy config.ini.sample from
the tar archive to the same directory. Edit config.ini with your settings.

Database setup

Both OpenXCAP backends (Database and OpenSIPS) depend on a database engine to
store service subscribers and XCAP resources. The database creation scripts
are found in the scripts/ directory, and involve 2 tables: subscriber, which
is used to authenticate XCAP requests, and xcap, where XCAP documents are
stored. The subscriber table is a subset of the subscriber table from
OpenSIPS, xcap table is the same as the one from OpenSIPS.

Configure opensips-mi-proxy

If you have installed the debian package copy
/etc/opensips-mi-proxy/config.ini.sample to /etc/opensips-mi-proxy/config.ini.

For other Linux OS copy config.ini.sample from the tar archive to the same
/directory. Edit config.ini with your settings.

[OpenSIPS]
socket = /var/run/opensips/socket

[MIProxy]
;listen_url = http://<defaultIPAddress>:8080
;trusted = any
For more information see the README and INSTALL files that come together
with the tar archive.

Configure soap-simple-proxy

If you have installed the debian package copy
/etc/soap-simple-proxy/config.ini.sample to
/etc/soap-simple-proxy/config.ini. For other Linux OS copy config.ini.sample
from the tar archive to the same directory. Edit config.ini with your
settings.


[SOAP Server]
address = 0.0.0.0
port = 9300
log_requests = Yes


[WSDL]
public_service_url = https://example.com/soap-simple-proxy/
internal_service_url = http://private-address:9200/


[XCAP]
root_uri = http://xcap.example.com/xcap-root
For more information see the README and INSTALL files that come together
with the tar archive.

A working OpenSIPS configuration is available at http://openxcap.org


Running the server
------------------

For non Debian systems copy openxcap, soap-simple-proxy and opensips-mi-proxy
startup scripts from their debian directory present in each tar file to
/etc/init.d/ and edit them to match your system.

Start OpenXCAP server:

/etc/init.d/openxcap start

Start opensips-mi-proxy:

/etc/init.d/opensips-mi-proxy start

Start soap-simple-proxy:

/etc/init.d/soap-simple-proxy start

OpenXCAP logs its messages to /var/log/openxcap/. All other servers log
/their messages to the system syslog. Check the log files for any startup or
runtime errors.

Creating user accounts

The user accounts are stored in OpenSIPS subscriber table. You can add
subscribers by using your favorite OpenSIPS subscriber management tool.


Test suite
----------

A test suite for testing the functionality the server is located in
/xcap/test directory. If the software has been installed as a Debian
package, the test suite is found in /usr/lib/python2.5/site-packages/xcap/test

To run the test suite add a user to the XCAP subscriber database
(alice@example.com in the following example), then create a configuration
file with the credentials in ~/.xcapclient.ini that reads:

[Account_test]
sip_address=alice@example.com
password=123
xcap_root = https://xcap.example.com/xcap-root

Then run the test suite:

~/openxcap/xcap/test$./test.py 
test_delete (test_attribute.AttributeTest) ... ok
test_get (test_attribute.AttributeTest) ... WARNING: test with URI in att_value is disabled
ok
test_put (test_attribute.AttributeTest) ... ok
test_global_auth (test_auth.AuthTest_org_openmobilealliance_pres_rules) ... ok
test_users_auth (test_auth.AuthTest_org_openmobilealliance_pres_rules) ... ok
test_global_auth (test_auth.AuthTest_pidf_manipulation) ... ok
test_users_auth (test_auth.AuthTest_pidf_manipulation) ... ok
test_global_auth (test_auth.AuthTest_pres_rules) ... ok
test_users_auth (test_auth.AuthTest_pres_rules) ... ok
test_global_auth (test_auth.AuthTest_resource_lists) ... ok
test_users_auth (test_auth.AuthTest_resource_lists) ... ok
test_global_auth (test_auth.AuthTest_rls_services) ... ok
test_users_auth (test_auth.AuthTest_rls_services) ... ok
test_global_auth (test_auth.AuthTest_test_app) ... ok
test_users_auth (test_auth.AuthTest_test_app) ... ok
test_global_auth (test_auth.AuthTest_watchers) ... ok
test_users_auth (test_auth.AuthTest_watchers) ... ok
test_global_auth (test_auth.AuthTest_xcap_caps) ... ok
test_users_auth (test_auth.AuthTest_xcap_caps) ... ok
test_delete (test_element.ElementTest) ... ok
test_get (test_element.ElementTest) ... WARNING: test with URI in att_value is disabled
ok
test_put_error (test_element.ElementTest) ... ok
Testing different ways of inserting an element as described in examples from Section 8.2.3 ... ok
Testing PUT requests of form '*[@att="some"]' which require looking into body of PUT ... ok
test_replacement (test_element_put.PutElementTest) ... ok
test400_1 (test_errors.ErrorsTest) ... ok
test400_2 (test_errors.ErrorsTest) ... ok
test404 (test_errors.ErrorsTest) ... ok
test405 (test_errors.ErrorsTest) ... ok
test409 (test_errors.ErrorsTest) ... ok
test_gibberish (test_errors.ErrorsTest) ... ok
test_conditional_GET (test_etags.ETagTest) ... ok
test_conditional_PUT (test_etags.ETagTest) ... ok
test_conditional_GET (test_etags.ETagTest2) ... ok
test_conditional_PUT (test_etags.ETagTest2) ... ok
test_etag_parsing (test_etags.ETagTest2) ... ok
test_errors (test_fragment.FragmentTest) ... ok
test_success (test_fragment.FragmentTest) ... ok
test_has_global (test_global.TestGlobal) ... ok
test_no_global (test_global.TestGlobal) ... ok
test_ns_bindings (test_nsbindings.NSBindingsTest) ... ok
test_pidf_manipulation (test_pidf.PIDFTest) ... ok
test_pidf_manipulation (test_presrules.PresenceRulesTest) ... ok
test_operations1 (test_resourcelists.DocumentTest) ... ok
test_operations2 (test_resourcelists.DocumentTest) ... ok
test_operations3 (test_resourcelists.DocumentTest) ... ok
test_operations4 (test_resourcelists.DocumentTest) ... ok
test_operations1 (test_rlsservices.DocumentTest) ... ok
test_operations2 (test_rlsservices.DocumentTest) ... ok
test_operations3 (test_rlsservices.DocumentTest) ... ok
test_operations4 (test_rlsservices.DocumentTest) ... ok
test_get (test_watchers.Test) ... ok
test_schema (test_xcap_caps.XCAPCaps) ... ok

----------------------------------------------------------------------
Ran 53 tests in 48.941s

OK

Notes

- Running the test suite for a given user will result in the destruction of
all xcap documents belonging to that user
- Replacing 'test.py' with 'test_something.py' will run only the tests
defined in test_something.py


Testing with xcapclient
-----------------------

A command line client is available in the same download repository of
OpenXCAP server. The client can be used to manipulate full or partial XML
documents on XCAP servers (not limited to OpenXCAP) and has a bash shell
command line completion facility that makes it very easy to browse through
the structure of XML documents based on XPATH.

See README of python-xcaplib package for examples on how to create/retrieve
a document.

